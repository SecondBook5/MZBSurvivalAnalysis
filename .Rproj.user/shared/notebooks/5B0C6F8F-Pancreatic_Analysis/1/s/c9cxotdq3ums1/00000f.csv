"0","quit"
"0",""
"0","# Define cutoff points for Albumin, LMR, PLT, LY, ANC, NLR, Alk_Phos, and Prognostic_Score_ALAN"
"0","cutoff_points <- list("
"0","  Albumin = 3.5,"
"0","  LMR = 2.1,"
"0","  PLT = 300,"
"0","  LY = 1.5,"
"0","  MON = 0.8,"
"0","  ANC = c(4, 8),"
"0","  NLR = c(3, 5),"
"0","  Alk_Phos = c(135, 200),"
"0","  Prognostic_Score_ALAN = c(0, 2, 4),"
"0","  Age = c(60, 65, 70)"
"0",")"
"0",""
"0","# Function to categorize values based on cutoff points"
"0","categorize_values <- function(df) {"
"0","  for (variable in names(cutoff_points)) {"
"0","    if (variable %in% colnames(df)) {"
"0","      if (variable == ""Prognostic_Score_ALAN"") {"
"0","        df[[paste0(variable, ""_category"")]] <- cut(df[[variable]], "
"0","                                                    breaks = c(-Inf, 0, 2, Inf),"
"0","                                                    labels = c(""0"", ""1-2"", ""3-4""))"
"0","      } else if (is.numeric(cutoff_points[[variable]])) {"
"0","        for (cutoff in cutoff_points[[variable]]) {"
"0","          category_column <- ifelse(df[[variable]] < cutoff, "
"0","                                    paste0(""< "", cutoff), "
"0","                                    paste0("">= "", cutoff))"
"0","          df <- cbind(df, category_column)"
"0","          colnames(df)[ncol(df)] <- paste0(variable, ""_"", cutoff)"
"0","        }"
"0","      } else {"
"0","        cutoff <- cutoff_points[[variable]]"
"0","        category_column <- cut(df[[variable]], "
"0","                               breaks = c(-Inf, cutoff, Inf),"
"0","                               labels = c(paste0(""< "", cutoff), "
"0","                                          paste0("">= "", cutoff)))"
"0","        df <- cbind(df, category_column)"
"0","        colnames(df)[ncol(df)] <- paste0(variable, ""_category"")"
"0","      }"
"0","    } else {"
"0","      cat(paste(""Column '"", variable, ""' not found in the DataFrame.\n""))"
"0","    }"
"0","  }"
"0","  return(df)"
"0","}"
"0",""
"0",""
"0","# Apply categorization to each DataFrame"
"0","categorized_npt_pancreatic_df <- categorize_values(py$npt_pancreatic_df)"
"0","categorized_resistant_pancreatic_df <- categorize_values(py$resistant_pancreatic_df)"
"0",""
"0","# Check the result"
"0","print(""Categorized NPT Pancreatic DataFrame:"")"
"1","[1]"
"1"," ""Categorized NPT Pancreatic DataFrame:"""
"1","
"
"0","print(head(categorized_npt_pancreatic_df))"
