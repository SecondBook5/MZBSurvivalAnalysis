"0","reticulate::repl_python()"
"0","import matplotlib.pyplot as plt"
"0","import seaborn as sns"
"0",""
"0","# Define the function to plot histograms and boxplots for one variable"
"0","def plot_numeric_statistics(df, variable, subset):"
"0","    # Create subplots"
"0","    fig, (ax_box, ax_hist) = plt.subplots(2, sharex=True, gridspec_kw={""height_ratios"": (.15, .85)})"
"0","    "
"0","    # Plot boxplot"
"0","    sns.boxplot(x=df[variable], ax=ax_box, color='orange', width=0.3, linewidth=1.5, showmeans=True, meanline=True,"
"0","                meanprops=dict(color='black', linestyle='--', linewidth=2),"
"0","                medianprops=dict(color='black', linewidth=2))"
"0","    ax_box.set_ylabel(variable)"
"0","    "
"0","    # Calculate mean and std_dev"
"0","    mean = df[variable].mean()"
"0","    std_dev = df[variable].std()"
"0","    "
"0","    # Plot histogram with density function"
"0","    sns.histplot(df[variable], kde=True, bins=12, stat='density', color='skyblue', ax=ax_hist)"
"0","    ax_hist.set_xlabel(variable)"
"0","    ax_hist.set_ylabel('Density')"
"0","    "
"0","    # Add lines for mean and mean +/- std_dev to the histogram"
"0","    ax_hist.axvline(mean, color='red', linestyle='--', linewidth=2, label=f'Mean: {mean:.2f}')"
"0","    ax_hist.axvline(mean + std_dev, color='purple', linestyle='--', linewidth=2, label=f'Mean + Std Dev: {mean + std_dev:.2f}')"
"0","    ax_hist.axvline(mean - std_dev, color='purple', linestyle='--', linewidth=2, label=f'Mean - Std Dev: {mean - std_dev:.2f}')"
"0","    "
"0","    # Add label for the IQR on the boxplot"
"0","    q1 = df[variable].quantile(0.25)"
"0","    q3 = df[variable].quantile(0.75)"
"0","    iqr = q3 - q1"
"0","    ax_box.text(0.5, 0.5, 'IQR', color='black', ha='center', fontsize=10, transform=ax_box.transAxes)"
"0","    "
"0","    # Remove y-axis ticks for boxplot"
"0","    ax_box.set_yticks([])"
"0","    "
"0","    # Despine the plots"
"0","    sns.despine(ax=ax_hist)"
"0","    sns.despine(ax=ax_box, left=True)"
"0","    "
"0","    # Set common xlabel"
"0","    plt.xlabel(variable)"
"0","    "
"0","    # Add title to the entire plot"
"0","    plt.suptitle(f'{subset} - by {variable}')"
"0","    "
"0","    # Show the plot"
"0","    plt.tight_layout()"
"0","    "
"0","    # Save the plot as an image"
"0","    plt.savefig(f'output/{subset}_{variable}_plot.png')"
"0","    "
"0","    # Close the plot to release memory"
"0","    plt.close()"
"0","    "
"0","# List of columns to exclude from numeric variables"
"0","exclude_columns = ['Prognostic_Score_ALAN', 'Event_Status']"
"0",""
"0","# Iterate over each numeric variable in your dataset and call the plot_numeric_statistics function"
"0","for column in cholangio_df.select_dtypes(include=['int64', 'float64']).columns:"
"0","    if column not in exclude_columns:"
"0","        plot_numeric_statistics(cholangio_df, column, 'Cholangiocarcinoma')"
"0","        "
"0",""
